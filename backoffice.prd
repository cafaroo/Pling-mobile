# Pling Management System - Product Requirements Document

## 1. Executive Summary

The Pling Management System is a web-based backoffice platform designed to complement the existing Pling mobile application. While the mobile app focuses on individual sales representatives and team members, the Management System provides enhanced functionality for sales managers, team leaders, and administrators. The system leverages the existing Supabase backend infrastructure while offering advanced analytics, reporting, and management capabilities.

## 2. Current System Architecture

### 2.1 Database Schema

The current Supabase implementation includes the following key tables:

1. **User Management**
   - `profiles`: User profiles with basic information
   - `teams`: Team definitions and metadata
   - `team_members`: Team membership with roles (member, leader, owner)
   - `team_invitations`: Pending team invitations
   - `team_invite_codes`: Codes for joining teams
   - `organizations`: Multi-team organizations
   - `organization_members`: Organization membership

2. **Sales & Performance Tracking**
   - `sales`: Individual sales records
   - `competitions`: Sales competitions
   - `competition_participants`: Competition participants
   - `competition_entries`: Competition performance entries
   - `competition_rewards`: Reward definitions for competitions
   - `competition_achievements`: Participant achievements
   - `competition_categories`: Categories for organizing competitions

3. **Goals System**
   - `goals`: Individual and team goals
   - `goal_milestones`: Milestones within goals
   - `goal_entries`: Progress entries for goals

4. **Communication**
   - `team_messages`: Team chat messages
   - `team_message_reads`: Message read status tracking
   - `notifications`: System notifications

5. **Subscription Management**
   - `subscriptions`: Team subscription details
   - `subscription_items`: Features included in subscriptions
   - `usage_records`: Feature usage tracking

### 2.2 Access Control

The system uses Row Level Security (RLS) policies to control data access:

1. **User-based access**: Users can only access their own data
2. **Team-based access**: Team members can access team data
3. **Role-based access**: Different permissions for members, leaders, and owners
4. **Organization-based access**: Organization admins can manage multiple teams

### 2.3 Current Functions

The backend includes several key functions:

1. **Team Management**
   - Team creation and member management
   - Invitation system with approval workflow
   - Role management (owner, leader, member)

2. **Competition System**
   - Competition creation and management
   - Participant tracking and leaderboards
   - Rewards and achievements

3. **Goal System**
   - Individual and team goal setting
   - Progress tracking and milestones
   - Automatic updates from sales

4. **Subscription System**
   - Tier-based subscription management
   - Feature access control
   - Usage tracking

## 3. Management System Requirements

### 3.1 Core Functionality

#### 3.1.1 Dashboard & Analytics

**Primary Dashboard**
- Real-time sales overview with key performance indicators
- Team performance comparisons
- Goal completion tracking
- Active competitions summary
- Recent activity feed

**Advanced Analytics**
- Sales trend analysis with customizable date ranges
- Performance forecasting
- Team member comparison
- Goal vs. actual analysis
- Competition performance metrics
- Custom report builder

#### 3.1.2 Team Management

**Team Overview**
- Comprehensive team directory
- Performance metrics by team
- Team composition and structure visualization
- Team comparison tools

**Member Management**
- Detailed member profiles
- Performance history and trends
- Individual goal tracking
- Approval workflow for new members
- Role management interface

**Organization Management**
- Multi-team overview
- Cross-team performance metrics
- Organization structure management
- Permission management

#### 3.1.3 Competition Management

**Competition Creation & Management**
- Advanced competition builder
- Template management
- Custom rules and scoring
- Participant management
- Real-time leaderboards
- Reward management

**Competition Analytics**
- Participation metrics
- Engagement analysis
- Performance distribution
- Historical competition comparison

#### 3.1.4 Goal Management

**Goal Setting & Tracking**
- Advanced goal creation interface
- Bulk goal assignment
- Cascading goals (organization → team → individual)
- Progress visualization
- Milestone management
- Automatic and manual progress updates

**Goal Analytics**
- Completion rate analysis
- Performance against targets
- Trend analysis
- Forecasting

#### 3.1.5 Subscription & Billing

**Subscription Management**
- Plan overview and comparison
- Upgrade/downgrade workflow
- Usage monitoring
- Billing history
- Invoice management

**Feature Management**
- Feature access control
- Usage limits configuration
- Custom feature packages

### 3.2 User Roles & Permissions

#### 3.2.1 System Administrator
- Full system access
- User management across all organizations
- System configuration
- Subscription management for all organizations

#### 3.2.2 Organization Administrator
- Organization management
- Team creation and management within the organization
- Member management across teams
- Subscription management for the organization
- Access to all analytics for the organization

#### 3.2.3 Team Leader
- Team management
- Member management within their team
- Competition creation and management
- Goal setting and tracking for team and members
- Access to team analytics

#### 3.2.4 Team Member
- Limited view access to team data
- Personal performance metrics
- Participation in competitions
- Personal goal tracking

### 3.3 Technical Requirements

#### 3.3.1 Frontend
- React-based web application
- Responsive design for desktop and tablet
- Modern UI with dark/light mode support
- Advanced data visualization components
- Real-time updates using Supabase realtime

#### 3.3.2 Backend
- Utilize existing Supabase backend
- Additional RPC functions for management-specific operations
- Enhanced security for administrative functions
- Optimized queries for reporting and analytics

#### 3.3.3 Integration
- Seamless authentication with existing system
- Real-time data synchronization with mobile app
- API endpoints for potential third-party integrations
- Export capabilities (CSV, Excel, PDF)

#### 3.3.4 Security
- Role-based access control
- Audit logging for administrative actions
- Secure API endpoints
- Data encryption for sensitive information

## 4. User Experience

### 4.1 User Interface

#### 4.1.1 Layout
- Sidebar navigation for main sections
- Top bar for user profile, notifications, and global actions
- Content area with breadcrumb navigation
- Responsive design with breakpoints for different screen sizes

#### 4.1.2 Design System
- Consistent with mobile app branding
- Dark mode as primary theme with light mode option
- Component library for consistent UI elements
- Accessibility compliance

#### 4.1.3 Key Screens

**Dashboard**
- KPI cards with key metrics
- Performance charts
- Activity feed
- Quick action buttons

**Team Management**
- Team directory with search and filter
- Team detail view with performance metrics
- Member management interface
- Invitation and approval workflow

**Analytics**
- Report builder interface
- Visualization options (charts, tables, maps)
- Filter and segmentation controls
- Export options

**Competition Management**
- Competition directory
- Competition builder interface
- Leaderboard view
- Reward management

**Goal Management**
- Goal directory with status indicators
- Goal creation interface
- Progress tracking view
- Milestone management

### 4.2 User Flows

#### 4.2.1 Onboarding
1. Initial login
2. Role-based welcome screen
3. Guided tour of key features
4. Setup checklist for new administrators

#### 4.2.2 Team Management
1. Create/select team
2. View team performance
3. Manage team members
4. Set team goals
5. Create team competitions

#### 4.2.3 Analytics & Reporting
1. Select report type
2. Configure parameters and filters
3. Generate visualization
4. Export or share report

#### 4.2.4 Competition Management
1. Create new competition
2. Define rules and rewards
3. Invite participants
4. Monitor progress
5. Announce winners and distribute rewards

## 5. Technical Architecture

### 5.1 System Components

#### 5.1.1 Frontend
- React application with TypeScript
- State management with React Context or Redux
- UI component library (Material UI or custom components)
- Chart libraries for data visualization
- Real-time subscriptions with Supabase

#### 5.1.2 Backend
- Supabase for authentication, database, and real-time features
- PostgreSQL functions for complex operations
- Row Level Security policies for access control
- Storage for reports and exports

#### 5.1.3 Integration Layer
- API endpoints for third-party integrations
- Webhook support for external notifications
- Export/import functionality

### 5.2 Data Flow

1. **Authentication Flow**
   - Login using Supabase Auth
   - Role determination
   - Permission assignment
   - UI customization based on role

2. **Data Access Flow**
   - Request data based on user permissions
   - Apply RLS policies
   - Return filtered data
   - Real-time updates through subscriptions

3. **Management Operations Flow**
   - Validate user permissions
   - Execute operation through RPC or direct database access
   - Log administrative action
   - Return result and update UI

### 5.3 Security Architecture

- JWT-based authentication
- Role-based access control
- Row Level Security policies
- Audit logging for sensitive operations
- Data encryption for sensitive information
- HTTPS for all communications

## 6. Implementation Plan

### 6.1 Phase 1: Core Infrastructure (Weeks 1-2)
- Set up project structure
- Implement authentication and authorization
- Create base UI components
- Establish data access patterns
- Implement basic dashboard

### 6.2 Phase 2: Team & Member Management (Weeks 3-4)
- Implement team directory and detail views
- Create member management interfaces
- Build invitation and approval workflows
- Develop role management functionality

### 6.3 Phase 3: Analytics & Reporting (Weeks 5-6)
- Implement analytics dashboard
- Create report builder
- Develop data visualization components
- Build export functionality

### 6.4 Phase 4: Competition & Goal Management (Weeks 7-8)
- Implement competition management
- Create goal setting and tracking interfaces
- Develop leaderboards and progress tracking
- Build reward management system

### 6.5 Phase 5: Advanced Features & Optimization (Weeks 9-10)
- Implement subscription management
- Create organization management
- Optimize performance
- Add advanced analytics features

### 6.6 Phase 6: Testing & Deployment (Weeks 11-12)
- Comprehensive testing
- Bug fixing
- Documentation
- Deployment preparation
- User training materials

## 7. Integration with Mobile App

### 7.1 Shared Data Model
- Both systems use the same Supabase backend
- Real-time synchronization of data changes
- Consistent authentication and authorization

### 7.2 Feature Parity vs. Specialization
- Core data accessible from both platforms
- Mobile app focuses on individual contributors and field operations
- Web management system focuses on administration, analytics, and management
- Some features exclusive to each platform based on use case

### 7.3 Notification System
- Cross-platform notifications
- Action required alerts
- Performance updates
- System announcements

## 8. Key Performance Indicators

### 8.1 System Performance
- Page load time < 2 seconds
- API response time < 500ms
- Real-time update latency < 1 second
- Support for 100+ concurrent users

### 8.2 User Engagement
- Admin login frequency
- Time spent on platform
- Feature utilization
- Report generation frequency

### 8.3 Business Impact
- Reduction in administrative time
- Increase in sales performance
- Improved goal attainment
- Higher competition participation

## 9. Future Enhancements

### 9.1 AI-Powered Insights
- Predictive analytics for sales forecasting
- Personalized recommendations for goals
- Anomaly detection for performance issues
- Automated report generation

### 9.2 Advanced Integrations
- CRM system integration
- ERP system integration
- Calendar and scheduling integration
- Communication platform integration

### 9.3 Expanded Analytics
- Custom dashboard builder
- Advanced visualization options
- Predictive modeling
- Comparative benchmarking

### 9.4 Gamification Enhancements
- Advanced reward systems
- Achievement badges
- Team challenges
- Personalized motivation systems

## 10. Technical Specifications

### 10.1 Database Enhancements

The following database enhancements will be needed to support the management system:

```sql
-- New table for administrative audit logs
CREATE TABLE admin_audit_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES profiles(id) NOT NULL,
    action text NOT NULL,
    entity_type text NOT NULL,
    entity_id uuid NOT NULL,
    details jsonb NOT NULL,
    created_at timestamptz DEFAULT now()
);

-- New table for report templates
CREATE TABLE report_templates (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    creator_id uuid REFERENCES profiles(id) NOT NULL,
    organization_id uuid REFERENCES organizations(id),
    is_public boolean DEFAULT false,
    configuration jsonb NOT NULL,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- New table for saved reports
CREATE TABLE saved_reports (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    creator_id uuid REFERENCES profiles(id) NOT NULL,
    template_id uuid REFERENCES report_templates(id),
    parameters jsonb NOT NULL,
    results jsonb,
    last_run_at timestamptz,
    schedule text,
    recipients jsonb,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- New columns for existing tables
ALTER TABLE teams ADD COLUMN settings jsonb DEFAULT '{}';
ALTER TABLE organizations ADD COLUMN settings jsonb DEFAULT '{}';
ALTER TABLE profiles ADD COLUMN admin_role text;
```

### 10.2 New RPC Functions

```sql
-- Function to generate administrative reports
CREATE OR REPLACE FUNCTION generate_admin_report(
    report_type text,
    parameters jsonb,
    organization_id uuid DEFAULT NULL
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result jsonb;
BEGIN
    -- Implementation details will vary based on report type
    -- This is a placeholder for the function structure
    
    -- Log report generation
    INSERT INTO admin_audit_logs (
        user_id,
        action,
        entity_type,
        entity_id,
        details
    ) VALUES (
        auth.uid(),
        'generate_report',
        'report',
        gen_random_uuid(),
        jsonb_build_object(
            'report_type', report_type,
            'parameters', parameters,
            'organization_id', organization_id
        )
    );
    
    RETURN result;
END;
$$;

-- Function to manage administrative permissions
CREATE OR REPLACE FUNCTION set_admin_role(
    user_id uuid,
    role text
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Check if current user has permission to set admin roles
    IF NOT EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND admin_role IN ('system_admin', 'super_admin')
    ) THEN
        RAISE EXCEPTION 'Insufficient permissions to set admin roles';
    END IF;
    
    -- Update user's admin role
    UPDATE profiles
    SET admin_role = role
    WHERE id = user_id;
    
    -- Log the action
    INSERT INTO admin_audit_logs (
        user_id,
        action,
        entity_type,
        entity_id,
        details
    ) VALUES (
        auth.uid(),
        'set_admin_role',
        'profile',
        user_id,
        jsonb_build_object('role', role)
    );
    
    RETURN FOUND;
END;
$$;
```

### 10.3 API Endpoints

The management system will require the following API endpoints:

1. **Authentication**
   - `/auth/login`: Admin login
   - `/auth/logout`: Admin logout
   - `/auth/reset-password`: Password reset

2. **Teams**
   - `/api/teams`: Team CRUD operations
   - `/api/teams/:id/members`: Team member management
   - `/api/teams/:id/analytics`: Team analytics

3. **Organizations**
   - `/api/organizations`: Organization CRUD operations
   - `/api/organizations/:id/teams`: Organization team management
   - `/api/organizations/:id/analytics`: Organization analytics

4. **Reports**
   - `/api/reports/templates`: Report template management
   - `/api/reports/generate`: Report generation
   - `/api/reports/saved`: Saved report management
   - `/api/reports/export`: Report export

5. **Competitions**
   - `/api/competitions`: Competition management
   - `/api/competitions/:id/participants`: Participant management
   - `/api/competitions/:id/rewards`: Reward management

6. **Goals**
   - `/api/goals`: Goal management
   - `/api/goals/:id/milestones`: Milestone management
   - `/api/goals/bulk-assign`: Bulk goal assignment

7. **System**
   - `/api/system/users`: User management
   - `/api/system/audit-logs`: Audit log access
   - `/api/system/settings`: System settings

## 11. Conclusion

The Pling Management System will provide a comprehensive web-based interface for sales managers, team leaders, and administrators to effectively manage their sales teams, track performance, and drive results. By leveraging the existing Supabase infrastructure and extending it with management-specific functionality, the system will offer a seamless experience that complements the mobile application while providing the advanced tools needed for effective management.

The phased implementation approach ensures that core functionality is delivered quickly, with additional features added in subsequent phases. The focus on analytics, reporting, and management tools addresses the specific needs of sales managers and team leaders, providing them with the insights and controls they need to drive team performance.

## Appendix A: Glossary

- **RLS**: Row Level Security, a Supabase/PostgreSQL feature for controlling data access
- **KPI**: Key Performance Indicator, metrics used to evaluate performance
- **RPC**: Remote Procedure Call, a method for executing functions on the server
- **JWT**: JSON Web Token, used for authentication and authorization
- **API**: Application Programming Interface, endpoints for data access and manipulation

## Appendix B: Database Schema Diagram

```
profiles
  ↑
  ↓
team_members ← teams ← organizations
  ↑             ↑         ↑
  ↓             ↓         ↓
sales        subscriptions organization_members
  ↓
  ↓
competitions → competition_participants → competition_entries
  ↓
  ↓
competition_rewards → competition_achievements
  
goals → goal_milestones
  ↓
  ↓
goal_entries

team_messages → team_message_reads

notifications
```

## Appendix C: User Interface Mockups

The following sections outline key screens in the management system:

### Dashboard
- KPI cards at the top
- Performance charts in the middle
- Recent activity feed on the right
- Quick action buttons at the bottom

### Team Management
- Team list with search and filter
- Team detail view with performance metrics
- Member management interface
- Invitation and approval workflow

### Analytics
- Report builder with drag-and-drop interface
- Visualization options (charts, tables, maps)
- Filter and segmentation controls
- Export options

### Competition Management
- Competition list with status indicators
- Competition builder interface
- Leaderboard view
- Reward management interface

### Goal Management
- Goal list with progress indicators
- Goal creation interface
- Progress tracking view
- Milestone management interface