# Team Functionality Analysis & Implementation Plan

## Current Status Overview

The team functionality in the Pling app has a solid foundation with a well-designed UI, but several key components need implementation or fixes to make all features fully operational. This analysis outlines the current state and provides a plan to complete the implementation.

## 1. Core Team Features

### 1.1 Team Management
- **Working**: 
  - Team creation
  - Team member management UI
  - Role management (owner, leader, member)
  - Team editing

- **Needs Implementation**:
  - Fix `joinTeamWithCode` function (currently referenced but not implemented)
  - Fix `acceptTeamInvitation` function (currently referenced but not implemented)
  - Fix `addTeamMember` function (currently referenced but not implemented)

### 1.2 Team Chat
- **Working**:
  - Chat UI
  - Message display

- **Needs Implementation**:
  - Fix real-time message subscription
  - Implement unread message count
  - Add rich media support

### 1.3 Team Analytics
- **Working**:
  - Basic analytics UI

- **Needs Implementation**:
  - Connect to real data sources
  - Implement charts with actual team data
  - Add performance metrics calculation

## 2. Subscription Management

### 2.1 Subscription Features
- **Working**:
  - Subscription UI
  - Plan display

- **Needs Implementation**:
  - Fix `getTeamSubscription` function (currently causing errors)
  - Implement subscription tier management
  - Connect usage tracking to actual usage

### 2.2 Subscription Tiers
- **Working**:
  - Tier definitions
  - Feature limits

- **Needs Implementation**:
  - Implement tier upgrade/downgrade functionality
  - Add payment processing integration
  - Implement feature access control based on tier

## 3. Organization Management

### 3.1 Organization Features
- **Working**:
  - Organization UI
  - Multi-team concept

- **Needs Implementation**:
  - Complete organization CRUD operations
  - Implement organization member management
  - Add team-to-organization assignment

## 4. Database Issues

### 4.1 Current Errors
- Error in `getTeamSubscription`: "JSON object requested, multiple (or no) rows returned"
  - This indicates the query is expecting a single row but getting none or multiple
  - Need to fix the query to properly handle the case when no subscription exists

### 4.2 Required Fixes
- Update `supabaseClient.ts` to handle query errors properly
- Fix SQL queries to use `maybeSingle()` instead of `single()` where appropriate
- Implement proper error handling in service functions

## 5. Implementation Plan

### Phase 1: Fix Critical Errors (1-2 days)
1. Fix subscription service errors:
   - Update `getTeamSubscription` to handle missing subscriptions
   - Add proper error handling to prevent app crashes
   - Implement fallback to free tier when no subscription exists

2. Implement missing team functions:
   - Complete `joinTeamWithCode` implementation
   - Complete `acceptTeamInvitation` implementation
   - Fix `addTeamMember` function

### Phase 2: Complete Core Team Features (2-3 days)
1. Enhance team chat:
   - Fix real-time message subscription
   - Implement proper read/unread tracking
   - Add message status indicators

2. Complete team analytics:
   - Connect to real data sources
   - Implement performance metrics
   - Add data visualization components

### Phase 3: Subscription System (2-3 days)
1. Complete subscription management:
   - Implement tier upgrade/downgrade
   - Add usage tracking
   - Implement feature access control

2. Add payment processing:
   - Integrate with Stripe or similar payment provider
   - Implement subscription lifecycle management
   - Add invoice generation and history

### Phase 4: Organization Management (2-3 days)
1. Complete organization features:
   - Implement organization CRUD operations
   - Add member management
   - Implement team assignment

2. Add organization analytics:
   - Implement cross-team analytics
   - Add organization-level reporting
   - Create organization dashboards

### Phase 5: Testing & Polishing (2-3 days)
1. Comprehensive testing:
   - Test all team features
   - Verify subscription functionality
   - Test organization management
   - Ensure proper error handling

2. UI/UX improvements:
   - Add loading states
   - Improve error messages
   - Add success confirmations
   - Enhance navigation between features

## 6. Detailed Implementation Tasks

### 6.1 Fix Subscription Service
```typescript
// services/subscriptionService.ts
export const getTeamSubscription = async (teamId: string): Promise<Subscription | null> => {
  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('team_id', teamId)
      .maybeSingle();  // Use maybeSingle instead of single

    if (error) throw error;

    return data ? {
      id: data.id,
      teamId: data.team_id,
      tier: data.tier,
      status: data.status,
      currentPeriodStart: data.current_period_start,
      currentPeriodEnd: data.current_period_end,
      cancelAtPeriodEnd: data.cancel_at_period_end,
      createdAt: data.created_at,
      updatedAt: data.updated_at,
    } : null;
  } catch (error) {
    console.error('Error getting team subscription:', error);
    return null;  // Return null instead of throwing
  }
};
```

### 6.2 Implement Team Invitation Functions
```typescript
// services/teamService.ts
export const joinTeamWithCode = async (code: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .rpc('join_team_with_code', { invite_code: code });

    if (error) throw error;
    return data.success;
  } catch (error) {
    console.error('Error joining team with code:', error);
    return false;
  }
};

export const acceptTeamInvitation = async (token: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .rpc('accept_team_invitation', { invitation_token: token });

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error accepting team invitation:', error);
    return false;
  }
};

export const addTeamMember = async (teamId: string, email: string, role: string): Promise<{ member: TeamMember | null; error: string | null }> => {
  try {
    const { data, error } = await supabase
      .rpc('handle_team_invitation', {
        team_id: teamId,
        email: email.toLowerCase().trim(),
        role: role
      });

    if (error) {
      throw error;
    }

    if (!data.success) {
      return { member: null, error: data.message };
    }

    // If user was added directly
    if (data.type === 'direct_add') {
      // Get the newly added member details
      const { data: member, error: memberError } = await supabase
        .from('team_members')
        .select(`
          id,
          team_id,
          user_id,
          role,
          created_at,
          profiles (
            id,
            name,
            email,
            avatar_url
          )
        `)
        .eq('team_id', teamId)
        .eq('user_id', data.user_id)
        .single();

      if (memberError) {
        throw memberError;
      }

      const newMember: TeamMember = {
        id: member.id,
        teamId: member.team_id,
        userId: member.user_id,
        role: member.role,
        createdAt: member.created_at,
        user: member.profiles ? {
          id: member.profiles.id,
          name: member.profiles.name,
          email: member.profiles.email,
          avatarUrl: member.profiles.avatar_url,
        } : undefined,
      };

      return { member: newMember, error: null };
    }

    // If invitation was created
    if (data.type === 'invitation') {
      return { member: null, error: 'Invitation sent to ' + email };
    }

    // Unexpected response
    return { 
      member: null, 
      error: 'An unexpected error occurred'
    };
  } catch (error) {
    console.error('Error adding team member:', error);
    return { 
      member: null, 
      error: 'An unexpected error occurred'
    };
  }
};
```

### 6.3 Enhance Team Chat
```typescript
// hooks/useUnreadMessages.ts
export function useUnreadMessages() {
  const { user } = useUser();
  const [unreadCount, setUnreadCount] = useState(0);
  const [lastReadTime, setLastReadTime] = useState<string | null>(null);

  useEffect(() => {
    if (!user?.team?.id) return;

    // Load initial unread count
    loadUnreadCount();

    // Subscribe to new messages
    const channel = supabase
      .channel('team_chat_unread')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'team_messages',
          filter: `team_id=eq.${user.team.id}`,
        },
        () => {
          loadUnreadCount();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user?.team?.id, lastReadTime]);

  const loadUnreadCount = async () => {
    if (!user?.team?.id) return;

    try {
      // Get last read time from database
      const { data: readTime } = await supabase
        .from('team_message_reads')
        .select('last_read_at')
        .eq('user_id', user.id)
        .eq('team_id', user.team.id)
        .maybeSingle();

      // If no read time exists, use epoch time as default
      const lastRead = readTime?.last_read_at || new Date(0).toISOString();
      setLastReadTime(lastRead);

      // Get unread count
      const { count } = await supabase
        .from('team_messages')
        .select('*', { count: 'exact', head: true })
        .eq('team_id', user.team.id)
        .gt('created_at', lastRead)
        .neq('user_id', user.id); // Don't count own messages

      setUnreadCount(count || 0);
    } catch (error) {
      console.error('Error loading unread count:', error);
      setUnreadCount(0);
    }
  };

  const markAsRead = async () => {
    if (!user?.team?.id) return;

    try {
      const now = new Date().toISOString();

      // Update or insert read timestamp
      const { error } = await supabase
        .from('team_message_reads')
        .upsert({
          user_id: user.id,
          team_id: user.team.id,
          last_read_at: now,
        });

      if (error) throw error;

      setLastReadTime(now);
      setUnreadCount(0);
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  };

  return {
    unreadCount,
    markAsRead,
  };
}
```

## 7. Integration Strategy

To tie all the features together, we'll implement:

1. **Unified Navigation Flow**:
   - Create clear paths between team, organization, and subscription features
   - Add breadcrumbs for nested navigation
   - Implement consistent back navigation

2. **Shared State Management**:
   - Enhance UserContext to include team and organization data
   - Create a SubscriptionContext for subscription state
   - Implement proper data refresh on navigation

3. **Consistent UI Components**:
   - Use the same card, button, and list components across all features
   - Maintain consistent color scheme and typography
   - Implement shared loading and error states

4. **Real-time Updates**:
   - Use Supabase real-time subscriptions for team changes
   - Implement WebSocket connections for chat
   - Add notification system for important events

## 8. Testing Strategy

1. **Unit Testing**:
   - Test individual service functions
   - Verify context providers
   - Test UI components in isolation

2. **Integration Testing**:
   - Test team creation and management flow
   - Verify subscription upgrade/downgrade process
   - Test organization management

3. **End-to-End Testing**:
   - Complete user journeys from team creation to management
   - Test multi-user scenarios
   - Verify real-time updates

## 9. Conclusion

The team functionality in the Pling app has a strong foundation but requires several key implementations to make all features fully operational. By following this implementation plan, we can systematically address the missing components and create a cohesive, fully-featured team management system.

The most critical issues to address first are:
1. Fix the subscription service errors
2. Implement the missing team invitation functions
3. Complete the real-time chat functionality

Once these core components are working, we can proceed to enhance the analytics, organization management, and subscription features to create a comprehensive team management solution.